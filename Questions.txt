Week 1

CONCEPTUAL QUESTIONS

1. What is Object-Oriented Programming (OOP)?  
OOP is a programming style based on the concept of objects, which contain data and the functions that work on that data.  
Four main ideas of OOP are:  
- Encapsulation: Keeping data and methods in one unit (class)  
- Abstraction: Hiding complex details and showing only important parts  
- Inheritance: Using features of one class in another  
- Polymorphism: One interface, many behaviors (like method overriding)

2. What is the difference between a class and an object?  
- Class: A design or template used to create objects (e.g., Car)  
- Object: A real example created using a class (e.g., myCar = new Car())  
Example: A class is like a recipe, an object is the dish made from it.

3. What is Inheritance? Why is it useful?  
Inheritance lets a class use properties and methods of another class. It helps reuse code.  
- Single: One parent, one child  
- Multilevel: A class inherits from another class which also inherited from another  
- Multiple: A class inherits from more than one parent (works in Python)

4. What is Polymorphism?  
Polymorphism means different classes can respond to the same method in different ways.  
- Compile-time: Achieved using method overloading  
- Runtime: Achieved using method overriding through inheritance

5. How is method overriding different from method overloading?  
- Overloading: Same method name, different parameters in the same class. Happens during compile time.  
- Overriding: Same method name and parameters in parent and child classes. Happens during runtime.

6. What are the advantages of OOP over procedural programming?  
- Better modularity and code reuse  
- Easier to manage and expand  
- More like real-world structure  
- Secures data using encapsulation

---

SCENARIO-BASED QUESTIONS

7. Library Management System Inheritance  
Create a base class Book with title, author, and methods like borrow.  
Then extend it:  
- Textbook: Adds subject  
- Novel: Adds genre  
- Comic: Adds illustrator  
This removes repetition and makes each type customizable.

8. Shape Class Example in Python  
```python
class Shape:
    def area(self):
        raise NotImplementedError()

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius
    def area(self):
        return 3.14 * self.radius * self.radius

class Square(Shape):
    def __init__(self, side):
        self.side = side
    def area(self):
        return self.side * self.side
```
Each shape uses the same method name area but calculates it differently. This is runtime polymorphism.

---

CODING QUESTION EXPLANATION

9. Output of Python Program  
class Animal:
    def sound(self):
        print("Animal makes a sound")

class Dog(Animal):
    def sound(self):
        print("Dog barks")

a = Dog()
a.sound()  # Output: Dog barks
The method from Dog runs because of runtime polymorphism.

10. Function Overloading vs Overriding

Overloading  
class Demo:
    def show(self, a):
        if isinstance(a, int):
            print("int")
        elif isinstance(a, float):
            print("double")

demo = Demo()
demo.show(5)      # Output: int
demo.show(5.0)    # Output: double

Overriding  
class Parent:
    def greet(self):
        print("Hello from Parent")

class Child(Parent):
    def greet(self):
        print("Hello from Child")

c = Child()
c.greet()  # Output: Hello from Child


---

EDGE OR TRICK QUESTIONS

11. Can constructors be inherited?  
No, but a child class can use the parent's constructor using super().

12. Parent class reference, child object  
class Parent:
    def display(self):
        print("Display from Parent")

class Child(Parent):
    def display(self):
        print("Display from Child")

p = Child()
p.display()  # Output: Display from Child

Child's version of the method runs due to dynamic method dispatch.

13. Multiple Inheritance  
- Java: Not allowed with classes to avoid confusion, but can be done using interfaces  
- Python: Allows it and handles it with Method Resolution Order (MRO)

